name: Deploy to Staging
on:
  workflow_run:
    workflows: ["Build and Push Docker Images"]
    types: [completed]
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "Force deployment (skip health checks)"
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
      github.event_name == 'workflow_dispatch'

    environment:
      name: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}

      - name: Deploy to staging server
        id: deploy
        run: |
          # Copy deployment files to staging server
          scp -o StrictHostKeyChecking=no docker-compose.prod.yml ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }}:~/
          scp -o StrictHostKeyChecking=no .env-example ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }}:~/

          # Deploy on staging server
          ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'ENDSSH'
            # Set environment variables
            export REGISTRY="${{ env.REGISTRY }}"
            export IMAGE_NAME="${{ env.IMAGE_NAME }}"
            export IMAGE_TAG="latest"
            export CLIENT_ENV="staging"
            export CLIENT_IMAGE_TAG="latest-staging"

            # Create staging environment file from template
            cp .env-example .env

            # Set staging-specific values
            sed -i "s|GROQ_API_KEY=.*|GROQ_API_KEY=${{ secrets.STAGING_GROQ_API_KEY }}|" .env
            sed -i "s|REDIS_PASSWORD=.*|REDIS_PASSWORD=${{ secrets.STAGING_REDIS_PASSWORD }}|" .env
            sed -i "s|CORS_ORIGINS=.*|CORS_ORIGINS=http://${{ secrets.STAGING_HOST }}:3000,http://client:3000|" .env

            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

            # Pull latest images
            docker compose -f docker-compose.prod.yml pull

            # Deploy with zero-downtime
            docker compose -f docker-compose.prod.yml up -d --wait

            # Cleanup old images
            docker image prune -f
          ENDSSH

      - name: Run health checks
        if: ${{ !github.event.inputs.force_deploy }}
        run: |
          # Wait for services to be ready
          sleep 60

          # Check API health
          curl -f http://${{ secrets.STAGING_HOST }}:8000/health || exit 1

          # Check client health
          curl -f http://${{ secrets.STAGING_HOST }}:3000 || exit 1

          # Test token endpoint
          curl -f -X POST http://${{ secrets.STAGING_HOST }}:8000/token -d "name=test-user" || exit 1

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: "✅ Staging deployment successful! URL: http://${{ secrets.STAGING_HOST }}:3000"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: "❌ Staging deployment failed! Check logs for details."
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Cleanup job to remove old artifacts - runs after staging deployment
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    strategy:
      matrix:
        service: [server, worker, client]
      fail-fast: false

    steps:
      - name: Delete untagged ${{ matrix.service }} packages
        uses: actions/delete-package-versions@v5
        continue-on-error: true
        with:
          package-name: "${{ github.event.repository.name }}/${{ matrix.service }}"
          package-type: "container"
          delete-only-untagged-versions: true
          min-versions-to-keep: 5
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup old tagged ${{ matrix.service }} packages
        uses: actions/delete-package-versions@v5
        continue-on-error: true
        with:
          package-name: "${{ github.event.repository.name }}/${{ matrix.service }}"
          package-type: "container"
          min-versions-to-keep: 15
          ignore-versions: "^(latest|main|staging|production)$"
          token: ${{ secrets.GITHUB_TOKEN }}
