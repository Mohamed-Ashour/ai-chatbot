services:
  # Redis Database
  redis:
    image: redis/redis-stack-server:7.4.0-v0
    container_name: chatbot-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      - REDIS_ARGS=--requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - chatbot-network-prod
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # FastAPI Server
  server:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_NAME:-fullstack-ai-chatbot}/server:${IMAGE_TAG:-latest}
    container_name: chatbot-server-prod
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_USER=${REDIS_USER:-default}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
      - TOKEN_EXPIRY_HOURS=${TOKEN_EXPIRY_HOURS:-1}
      - APP_ENV=production
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - chatbot-network-prod
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
      replicas: 1

  # AI Worker
  worker:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_NAME:-fullstack-ai-chatbot}/worker:${IMAGE_TAG:-latest}
    container_name: chatbot-worker-prod
    restart: unless-stopped
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_USER=${REDIS_USER:-default}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - GROQ_API_KEY=${GROQ_API_KEY}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - chatbot-network-prod
    healthcheck:
      test: [ "CMD", "python", "-c", "import redis; redis.Redis.from_url('redis://:${REDIS_PASSWORD}@redis:6379').ping()" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
      replicas: 1

  # Next.js Client
  client:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_NAME:-fullstack-ai-chatbot}/client:${IMAGE_TAG:-latest}
    container_name: chatbot-client-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL:-ws://localhost:8000}
      - NODE_ENV=production
    depends_on:
      - server
    networks:
      - chatbot-network-prod
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
      replicas: 1

  # Nginx Reverse Proxy (Optional for production)
  nginx:
    image: nginx:alpine
    container_name: chatbot-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl:ro
    depends_on:
      - client
      - server
    networks:
      - chatbot-network-prod
    profiles:
      - nginx
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: chatbot-prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - chatbot-network-prod
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Grafana for metrics visualization (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: chatbot-grafana-prod
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - chatbot-network-prod
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

volumes:
  redis_data_prod:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  chatbot-network-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16